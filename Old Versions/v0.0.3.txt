<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OopisOs v.03</title>
    <link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        * {
            box-sizing: border-box;
        }
        body {
            font-family: 'VT323', monospace;
            background-color: #1a1a1a;
            color: #00ff00;
            margin: 0;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            overflow-x: hidden;
        }
        #terminal {
            width: 90vw;
            max-width: 800px;
            height: 70vh;
            max-height: 600px;
            background-color: #0d0d0d;
            border: 2px solid #333333;
            border-radius: 8px;
            padding: 20px;
            overflow-y: auto;
            overflow-x: hidden;
            box-shadow: 0 0 15px rgba(0, 255, 0, 0.2);
            display: flex;
            flex-direction: column;
        }
        #output {
            flex-grow: 1; 
            margin-bottom: 10px;
            overflow-x: hidden; 
            width: 100%;
            min-width: 0; 
        }
        .output-line {
            white-space: normal; 
            word-break: break-all; 
            overflow-wrap: break-word; 
            overflow-x: hidden; 
        }
        .input-line {
            display: flex;
            align-items: center;
            width: 100%;
        }
        .prompt-user { 
            margin-right: 2px;
            color: #7fdbff; 
        }
        .prompt-separator {
             margin-right: 2px;
        }
        .prompt-host { 
            margin-right: 2px;
        }
        .prompt-path {
            margin-right: 4px;
        }
        .prompt-char {
            margin-right: 8px;
        }
        #current-input {
            flex-shrink: 1; 
            min-width: 0; 
            white-space: nowrap; 
            overflow: hidden; 
        }
        .cursor {
            width: 10px; 
            height: 1.2em; 
            background-color: #00ff00; 
            animation: blink 1s step-end infinite;
            margin-left: 2px; 
        }
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0; }
        }
        #hidden-input {
            position: absolute;
            opacity: 0; 
            width: 1px; 
            height: 1px;
            top: -10px; 
            left: -10px;
        }
        .error-message { color: #ff4136; }
        .console-log-message { color: #aaaaaa; }
        .directory-item { color: #7fdbff; }
        .file-item { }
        .success-message { color: #2ecc40; }
        .warning-message { color: #ff851b; }
         .help-command-name {
            color: #7fdbff; 
            font-weight: bold;
        }
        .help-description {
             margin-left: 10px; 
        }
    </style>
</head>
<body>
    <div id="terminal">
        <div id="output"></div>
        <div class="input-line">
            <span id="prompt-user" class="prompt-user"></span>
            <span class="prompt-separator">@</span>
            <span id="prompt-host" class="prompt-host">OopisOs</span>
            <span class="prompt-separator">:</span>
            <span id="prompt-path" class="prompt-path"></span>
            <span class="prompt-char">&gt;</span>
            <span id="current-input"></span>
            <div class="cursor"></div>
        </div>
        <input type="text" id="hidden-input" autofocus autocapitalize="none" autocorrect="off" spellcheck="false">
    </div>

    <script>
        const terminal = document.getElementById('terminal');
        const outputDiv = document.getElementById('output');
        const currentInputSpan = document.getElementById('current-input');
        const hiddenInput = document.getElementById('hidden-input');
        const promptUserSpan = document.getElementById('prompt-user');
        const promptPathSpan = document.getElementById('prompt-path');

        let fsData = {}; 
        let currentPath = '/';
        let currentUser = "Guest"; 
        
        const userCredentialsStorageKey = 'oopisOsUserCredentials';
        const fileSystemStorageKeyPrefix = 'oopisOsFileSystem_';
        const userTerminalStateKeyPrefix = 'oopisOsUserTerminalState_'; 

        let awaitingResetConfirmation = false; 

        // --- Helper to format console arguments ---
        function formatConsoleArgs(args) {
            return Array.from(args).map(arg => {
                if (typeof arg === 'object' && arg !== null) {
                    try { return JSON.stringify(arg); } catch (e) { return arg.toString(); }
                }
                return arg;
            }).join(' ');
        }
        
        // --- Console Output Redirection ---
        const originalConsoleLog = console.log;
        const originalConsoleWarn = console.warn;
        const originalConsoleError = console.error;

        console.log = function(...args) {
            appendToOutput(`LOG: ${formatConsoleArgs(args)}`, false, 'console-log-message');
            originalConsoleLog.apply(console, args); 
        };
        console.warn = function(...args) {
            appendToOutput(`WARN: ${formatConsoleArgs(args)}`, true); 
            originalConsoleWarn.apply(console, args);
        };
        console.error = function(...args) {
            appendToOutput(`ERROR: ${formatConsoleArgs(args)}`, true);
            originalConsoleError.apply(console, args);
        };
        
        // Appends a line of text to the output area.
        function appendToOutput(text, isError = false, typeClass = null) {
            const newLine = document.createElement('div');
            newLine.classList.add('output-line'); 
            if (typeClass) newLine.classList.add(typeClass);
            if (isError) newLine.classList.add('error-message');
            newLine.textContent = text;
            outputDiv.appendChild(newLine);
            outputDiv.scrollTop = outputDiv.scrollHeight; 
        }
        
        // --- Filesystem Management (Now Per-User) ---
        function getFileSystemKey(user) {
            return `${fileSystemStorageKeyPrefix}${user}`;
        }

        function initializeFileSystem(user = currentUser) {
            console.log(`Initializing filesystem for ${user}.`);
            fsData = { '/': { type: 'directory', children: {} } }; 
            saveFileSystemData(user); 
        }

        function saveFileSystemData(user = currentUser) {
            try {
                localStorage.setItem(getFileSystemKey(user), JSON.stringify(fsData)); 
            } catch (e) {
                console.error(`Error saving filesystem data for ${user}:`, e.message);
                appendToOutput(`Critical Error: Could not save filesystem for ${user}.`, true);
            }
        }

        function loadFileSystemData(user) {
            const userFsKey = getFileSystemKey(user);
            try {
                const storedFs = localStorage.getItem(userFsKey);
                if (storedFs) {
                    fsData = JSON.parse(storedFs); 
                    if (!fsData['/'] || fsData['/'].type !== 'directory') {
                        console.warn(`Invalid filesystem data for ${user}. Reinitializing.`);
                        initializeFileSystem(user);
                    } else {
                        console.log(`Filesystem for ${user} loaded.`);
                    }
                } else {
                    console.log(`No filesystem found for ${user}. Initializing new one.`);
                    initializeFileSystem(user);
                }
            } catch (e) {
                console.error(`Error loading filesystem for ${user}:`, e.message);
                appendToOutput(`Warning: Filesystem for ${user} corrupted. Initializing new one.`, true);
                initializeFileSystem(user); 
            }
        }

        // --- User-Specific Terminal State Save/Load ---
        function getUserTerminalStateKey() {
            return `${userTerminalStateKeyPrefix}${currentUser}`;
        }

        function saveTerminalState() { 
            const state = {
                currentPath: currentPath,
                outputHTML: outputDiv.innerHTML,
                currentInput: currentInputSpan.textContent
            };
            try {
                localStorage.setItem(getUserTerminalStateKey(), JSON.stringify(state));
                appendToOutput(`Terminal state saved for ${currentUser}.`, false, 'success-message');
            } catch (e) {
                console.error(`Error saving terminal state for ${currentUser}:`, e.message);
                appendToOutput(`Error: Could not save terminal state for ${currentUser}.`, true);
            }
        }

        function loadTerminalState(user = currentUser) { 
            const userStateKey = `${userTerminalStateKeyPrefix}${user}`;
            try {
                const storedState = localStorage.getItem(userStateKey);
                if (storedState) {
                    const state = JSON.parse(storedState);
                    currentPath = state.currentPath || '/'; 
                    outputDiv.innerHTML = state.outputHTML || ''; 
                    currentInputSpan.textContent = state.currentInput || '';
                    
                    updatePrompt(); 
                    outputDiv.scrollTop = outputDiv.scrollHeight; 
                    console.log(`Terminal UI state loaded for ${user}.`);
                    return true; 
                }
            } catch (e) {
                console.error(`Error loading terminal UI state for ${user}:`, e.message);
            }
            outputDiv.innerHTML = '';
            currentInputSpan.textContent = '';
            currentPath = '/'; 
            updatePrompt();
            appendToOutput(`Welcome, ${user}!`);
            return false; 
        }
        
        // Resolves a target path (absolute or relative) against a base path.
        function getAbsolutePath(targetPath, basePath) {
            if (targetPath.startsWith('/')) basePath = '/'; 
            const baseSegments = basePath === '/' ? [] : basePath.substring(1).split('/').filter(s => s !== '');
            const targetSegments = targetPath.split('/').filter(s => s !== ''); 
            let resolvedSegments = [...baseSegments];
            for (const segment of targetSegments) {
                if (segment === '.') continue;
                if (segment === '..') { if (resolvedSegments.length > 0) resolvedSegments.pop(); } 
                else resolvedSegments.push(segment);
            }
            if (resolvedSegments.length === 0) return '/'; 
            return '/' + resolvedSegments.join('/');
        }

        // Retrieves a node (file/directory object) from fsData by its absolute path.
        function getNodeByPath(path) {
            if (path === '/') return fsData['/']; // fsData is now user-specific
            const segments = path.substring(1).split('/').filter(s => s !== ''); 
            let currentNode = fsData['/'];
            for (const segment of segments) {
                if (currentNode && currentNode.type === 'directory' && currentNode.children && currentNode.children[segment]) {
                    currentNode = currentNode.children[segment];
                } else return null; 
            }
            return currentNode;
        }

        // --- User Credentials Management ---
        function getUserCredentials() {
            const creds = localStorage.getItem(userCredentialsStorageKey);
            return creds ? JSON.parse(creds) : {};
        }

        function saveUserCredentials(credentials) {
            try {
                localStorage.setItem(userCredentialsStorageKey, JSON.stringify(credentials));
            } catch (e) {
                console.error("Error saving user credentials:", e.message);
                appendToOutput("Critical Error: Could not save user credentials.", true);
            }
        }

        // --- Command Help Data ---
        const commandHelpData = {
            'ls': { usage: 'ls [path]', description: 'Lists directory contents.' },
            'cd': { usage: 'cd <directory_path>', description: 'Changes the current directory.' },
            'mkdir': { usage: 'mkdir <directory_name>', description: 'Creates a new directory.' },
            'touch': { usage: 'touch <file_name>', description: 'Creates an empty file.' },
            'mv': { 
                usage: 'mv <source> <destination>',
                description: 'Moves or renames a file or directory. If destination is an existing directory, source is moved into it. Otherwise, source is renamed/moved to destination path.'
            },
            'clear': { usage: 'clear', description: 'Clears the terminal screen.' },
            'register': { usage: 'register <username> <password>', description: 'Registers a new user.' },
            'login': { usage: 'login <username> <password>', description: 'Logs in an existing user.' },
            'logout': { usage: 'logout', description: 'Logs out the current user.' },
            'savestate': { usage: 'savestate', description: 'Saves current session (output, path, input) for current user.' },
            'loadstate': { usage: 'loadstate', description: 'Loads last saved session for current user.' },
            'reset': { usage: 'reset', description: 'Resets terminal to default state (requires confirmation).' },
            'help': { usage: 'help [command_name]', description: 'Displays help information.' }
        };

        // --- Command Handlers ---
        function handleLs(args) { 
            const targetPathArg = args[0] || '.'; 
            const resolvedPath = getAbsolutePath(targetPathArg, currentPath);
            const node = getNodeByPath(resolvedPath);
            if (node && node.type === 'directory') {
                const childrenNames = Object.keys(node.children);
                if (childrenNames.length === 0) { appendToOutput("Directory is empty."); return; }
                const fragment = document.createDocumentFragment();
                childrenNames.sort().forEach(name => {
                    const childNode = node.children[name];
                    const div = document.createElement('div');
                    div.classList.add('output-line');
                    if (childNode.type === 'directory') {
                        div.textContent = name + '/';
                        div.classList.add('directory-item');
                    } else { 
                        div.textContent = name;
                        div.classList.add('file-item'); 
                    }
                    fragment.appendChild(div); 
                });
                outputDiv.appendChild(fragment); 
                outputDiv.scrollTop = outputDiv.scrollHeight; 
            } else if (node) appendToOutput(`ls: ${targetPathArg}: Not a directory`, true);
            else appendToOutput(`ls: cannot access '${targetPathArg}': No such file or directory`, true);
        }

        function handleCd(args) { 
            if (args.length === 0) { appendToOutput("cd: missing operand. Usage: cd <directory>", true); return; }
            const targetPathArg = args[0];
            const resolvedPath = getAbsolutePath(targetPathArg, currentPath);
            const node = getNodeByPath(resolvedPath);
            if (node && node.type === 'directory') { currentPath = resolvedPath; updatePrompt(); } 
            else if (node) appendToOutput(`cd: ${targetPathArg}: Not a directory`, true);
            else appendToOutput(`cd: ${targetPathArg}: No such file or directory`, true);
        }
        
        function handleMkdir(args) { 
            if (args.length === 0) { appendToOutput("mkdir: missing operand. Usage: mkdir <directory_name>", true); return; }
            const newDirName = args[0];
            if (newDirName.includes('/') || newDirName === "." || newDirName === "..") {
                appendToOutput(`mkdir: cannot create directory '${newDirName}': Invalid name or character.`, true); return;
            }
            const parentDirNode = getNodeByPath(currentPath); 
            if (!parentDirNode || parentDirNode.type !== 'directory') {
                appendToOutput("mkdir: critical error: current path is not a directory.", true); return;
            }
            if (parentDirNode.children[newDirName]) {
                appendToOutput(`mkdir: cannot create directory ‘${newDirName}’: File exists`, true);
            } else {
                parentDirNode.children[newDirName] = { type: 'directory', children: {} };
                saveFileSystemData(); 
                appendToOutput(`Directory '${newDirName}' created successfully.`, false, 'success-message');
            }
        }
        
        function handleTouch(args) { 
            if (args.length === 0) { appendToOutput("touch: missing file operand", true); return; }
            const fileName = args[0];
            if (fileName.includes('/')) { appendToOutput(`touch: cannot touch '${fileName}': Not a valid file name (contains '/')`, true); return; }
            if (fileName === "." || fileName === "..") { appendToOutput(`touch: cannot touch '${fileName}': Invalid file name.`, true); return; }
            
            const parentDirNode = getNodeByPath(currentPath); 
            if (!parentDirNode || parentDirNode.type !== 'directory') {
                appendToOutput("touch: critical error: current path is not a directory.", true); return;
            }
            if (parentDirNode.children[fileName]) { return; } 
            else {
                parentDirNode.children[fileName] = { type: 'file', content: "" };
                saveFileSystemData(); 
            }
        }

        function handleMv(args) {
            if (args.length < 2) {
                appendToOutput("mv: missing source and/or destination operand", true);
                return;
            }
            const sourcePathArg = args[0];
            const destPathArg = args[1];

            const absSourcePath = getAbsolutePath(sourcePathArg, currentPath);
            let absDestPath = getAbsolutePath(destPathArg, currentPath); 

            if (absSourcePath === '/') {
                appendToOutput("mv: cannot move root directory '/'", true);
                return;
            }

            const sourceNode = getNodeByPath(absSourcePath);
            if (!sourceNode) {
                appendToOutput(`mv: cannot stat '${sourcePathArg}': No such file or directory`, true);
                return;
            }

            const sourceParentPath = absSourcePath.substring(0, absSourcePath.lastIndexOf('/')) || '/';
            const sourceName = absSourcePath.substring(absSourcePath.lastIndexOf('/') + 1);
            const sourceParentNode = getNodeByPath(sourceParentPath);

            if (!sourceParentNode || typeof sourceParentNode.children[sourceName] === 'undefined') {
                 appendToOutput(`mv: internal error - source '${sourceName}' not found in parent '${sourceParentPath}'`, true);
                 return;
            }

            let finalDestParentNode;
            let finalDestName;
            
            const destNodeAtFullPath = getNodeByPath(absDestPath);

            if (destNodeAtFullPath && destNodeAtFullPath.type === 'directory') {
                finalDestParentNode = destNodeAtFullPath;
                finalDestName = sourceName;
                absDestPath = getAbsolutePath(finalDestName, absDestPath); 
            } else {
                const lastSlashIndex = absDestPath.lastIndexOf('/');
                const finalDestParentPath = lastSlashIndex === 0 ? '/' : absDestPath.substring(0, lastSlashIndex);
                finalDestName = absDestPath.substring(lastSlashIndex + 1);
                
                finalDestParentNode = getNodeByPath(finalDestParentPath);
                if (!finalDestParentNode || finalDestParentNode.type !== 'directory') {
                    appendToOutput(`mv: target '${finalDestParentPath}' is not a directory or does not exist`, true);
                    return;
                }
            }
            
            if (finalDestName === "" || finalDestName === "." || finalDestName === "..") {
                appendToOutput(`mv: invalid destination name '${finalDestName}'`, true);
                return;
            }

            if (absSourcePath === absDestPath) {
                 appendToOutput(`mv: '${sourcePathArg}' and '${destPathArg}' are the same file or directory.`, false, 'console-log-message');
                 return;
            }

            if (typeof finalDestParentNode.children[finalDestName] !== 'undefined') {
                 appendToOutput(`mv: cannot move to '${destPathArg}': Destination '${finalDestName}' already exists.`, true);
                 return;
            }

            if (sourceNode.type === 'directory') {
                const effectiveDestPathForDir = absDestPath; 
                if (effectiveDestPathForDir.startsWith(absSourcePath + '/') || effectiveDestPathForDir === absSourcePath) {
                    appendToOutput(`mv: cannot move directory '${sourceName}' into itself or a subdirectory`, true);
                    return;
                }
            }

            finalDestParentNode.children[finalDestName] = sourceNode; 
            delete sourceParentNode.children[sourceName]; 

            saveFileSystemData(); 
            appendToOutput(`Moved '${sourcePathArg}' to '${destPathArg}'`, false, 'success-message');
        }

        function handleClear() { outputDiv.innerHTML = ''; }
        function handleSaveState() { saveTerminalState(); } 
        
        function handleLoadState() { 
            loadFileSystemData(currentUser); 
            if (loadTerminalState(currentUser)) {
                appendToOutput(`Terminal state for ${currentUser} loaded successfully.`, false, 'success-message');
            } else {
                appendToOutput(`No saved terminal state found for ${currentUser}.`, true);
            }
        }
        
        function performFullReset() {
            outputDiv.innerHTML = ''; 
            currentInputSpan.textContent = ''; 
            
            localStorage.removeItem(getUserTerminalStateKey()); 
            localStorage.removeItem(getFileSystemKey(currentUser)); 
            localStorage.removeItem(`${userTerminalStateKeyPrefix}Guest`);
            localStorage.removeItem(getFileSystemKey("Guest"));
            localStorage.removeItem(userCredentialsStorageKey); 

            currentUser = "Guest"; 
            loadFileSystemData("Guest"); 
            loadTerminalState("Guest"); 
            
            appendToOutput("Terminal has been fully reset to default state.", false, 'success-message');
        }

        function handleReset() { 
            appendToOutput("Are you sure you want to reset the terminal? This action cannot be undone.", false, 'warning-message');
            appendToOutput("Type 'YES' (all caps) to confirm, or any other input to cancel.", false, 'warning-message');
            awaitingResetConfirmation = true;
        }

        function handleRegister(args) {
            if (args.length < 2) { appendToOutput("Usage: register <username> <password>", true); return; }
            const username = args[0];
            const password = args[1];
            const credentials = getUserCredentials();
            if (credentials[username]) { appendToOutput(`Error: User '${username}' already exists.`, true); return; }
            if (username.toLowerCase() === "guest") { appendToOutput(`Error: Cannot register username 'Guest'.`, true); return; }
            
            credentials[username] = password; 
            saveUserCredentials(credentials);
            initializeFileSystem(username); 
            console.warn(`SECURITY WARNING: Storing password in plaintext for user ${username}.`);
            appendToOutput(`User '${username}' registered. Their filesystem is ready. You can now login.`, false, 'success-message');
        }

        function handleLogin(args) {
            if (args.length < 2) { appendToOutput("Usage: login <username> <password>", true); return; }
            const username = args[0];
            const password = args[1];
            const credentials = getUserCredentials();

            if (credentials[username] && credentials[username] === password) {
                currentUser = username;
                loadFileSystemData(currentUser); 
                loadTerminalState(currentUser);  
                appendToOutput(`Successfully logged in as ${currentUser}.`, false, 'success-message');
            } else {
                appendToOutput("Login failed: Invalid username or password.", true);
            }
        }

        function handleLogout() {
            if (currentUser === "Guest") { appendToOutput("Already Guest. No action taken.", false, 'console-log-message'); return; }
            
            saveTerminalState(); 
            
            const prevUser = currentUser;
            currentUser = "Guest";
            
            loadFileSystemData("Guest"); 
            loadTerminalState("Guest");  
            appendToOutput(`User ${prevUser} logged out. Now Guest.`, false, 'success-message');
        }

        function handleHelp(args) {
            if (args.length === 0) {
                appendToOutput("Available commands (type 'help <command>' for more info):");
                const commandNames = Object.keys(commandRegistry).sort();
                const fragment = document.createDocumentFragment();
                commandNames.forEach(cmdName => {
                    const div = document.createElement('div');
                    div.classList.add('output-line');
                    div.textContent = `- ${cmdName}`; 
                    fragment.appendChild(div);
                });
                outputDiv.appendChild(fragment);
                outputDiv.scrollTop = outputDiv.scrollHeight;
            } else {
                const commandName = args[0].toLowerCase();
                if (commandHelpData[commandName]) {
                    const helpInfo = commandHelpData[commandName];
                    appendToOutput(`Command: ${commandName}`, false, 'help-command-name');
                    appendToOutput(`  Usage: ${helpInfo.usage}`, false, 'help-description');
                    appendToOutput(`  Description: ${helpInfo.description}`, false, 'help-description');
                } else {
                    appendToOutput(`No help available for command: '${commandName}'`, true);
                }
            }
        }
        
        const commandRegistry = {
            'ls': handleLs, 'cd': handleCd, 'mkdir': handleMkdir, 'touch': handleTouch, 
            'mv': handleMv, 
            'clear': handleClear,
            'register': handleRegister, 'login': handleLogin, 'logout': handleLogout,
            'savestate': handleSaveState, 'loadstate': handleLoadState, 'reset': handleReset,
            'help': handleHelp 
        };
        
        // Updates the path displayed in the prompt.
        function updatePrompt() {
            promptUserSpan.textContent = currentUser;
            promptPathSpan.textContent = currentPath.trim() === '' ? '/' : currentPath;
        }
        
        // Processes the command entered by the user.
        function processCommand(command) {
            const trimmedCommand = command.trim(); 

            if (awaitingResetConfirmation) {
                appendToOutput(`> ${trimmedCommand}`); 
                if (trimmedCommand === "YES") {
                    performFullReset();
                } else {
                    appendToOutput("Reset cancelled.", false, 'console-log-message');
                }
                awaitingResetConfirmation = false;
            } else {
                const commandToEcho = trimmedCommand === '' ? `${currentUser}@OopisOs:${currentPath}> ` : `${currentUser}@OopisOs:${currentPath}> ${trimmedCommand}`;
                appendToOutput(commandToEcho);

                const parts = trimmedCommand.split(' ').filter(p => p !== ''); 
                const baseCommand = parts[0];
                const args = parts.slice(1);
                
                if (!baseCommand) { 
                    // No command entered
                } else {
                    const handler = commandRegistry[baseCommand.toLowerCase()];
                    if (handler) {
                        handler(args);
                    } else {
                        appendToOutput(`Error: Command not found: "${baseCommand}"`, true);
                    }
                }
            }
            
            currentInputSpan.textContent = ''; 
            hiddenInput.value = ''; 
        }

        // Focuses the hidden input when the terminal area is clicked/tapped.
        terminal.addEventListener('click', (event) => {
            if (event.target.tagName !== 'BUTTON' && event.target.tagName !== 'A') {
                 hiddenInput.focus();
            }
        });

        // Handles keyboard input.
        hiddenInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                processCommand(currentInputSpan.textContent); 
            }
            // Backspace and printable characters are handled by the 'input' event
        });

        hiddenInput.addEventListener('input', (event) => {
            currentInputSpan.textContent = hiddenInput.value;
        });

        // Initializes the application when the window loads.
        window.onload = () => {
            console.warn("SECURITY WARNING: User credentials in this demo are stored in plaintext in localStorage and are NOT secure. Do not use real passwords.");
            currentUser = "Guest"; 
            loadFileSystemData("Guest"); 
            loadTerminalState("Guest");  
            setTimeout(() => { hiddenInput.focus(); }, 100);
            console.log("OopisOs v.03 loaded. mv command and input fixes enabled.");
        };
    </script>
</body>
</html>
